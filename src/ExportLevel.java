import java.io.FileNotFoundException;
import java.io.PrintWriter;
import java.io.UnsupportedEncodingException;
import java.util.ArrayList;

public class ExportLevel {
	ExportLevel(String filepath, Level level){
		PrintWriter writer;
		try {
			writer = new PrintWriter(filepath + ".lua", "UTF-8"); //File name
			writer.println("--This is autogenerated by colorwalkeditor.\n");
			//Level variables
			writer.println("local " + level.getName() + " = { background, foreground, objects = {}, objectCount, nextLevel};");
			writer.println(level.getName() + ".background = \"" + level.backgroundImagePath + "\";");
			writer.println(level.getName() + ".foreground = \"" + level.foregroundImagePath + "\";");
			writer.println(level.getName() + ".objectCount = " + level.objectCount + ";");
			writer.println(level.getName() + ".nextLevel = \"" + level.nextLevel + "\";");
			ArrayList<Touchable> objects = level.getSprites();
			//Objects and their variables
			int i = 1;
			for(Touchable obj : objects){
				writer.println("--------------------------------------------------------");
				writer.println("--------------------------------------------------------");
				writer.println("--------------------------------------------------------");
				writer.println(level.getName() + ".objects[" + i + "] = {};");
				writer.println(level.getName() + ".objects[" + i + "].ID          = "+ obj.ID         + ";");
				writer.println(level.getName() + ".objects[" + i + "].imagePath   = \""+ obj.imagePath  + "\";");
				writer.println(level.getName() + ".objects[" + i + "].soundPath   = \""+ obj.soundPath  + "\";");
				writer.println(level.getName() + ".objects[" + i + "].touchableId = \""+ obj.touchableId+ "\";");
				writer.println(level.getName() + ".objects[" + i + "].imageName   = \""+ obj.imageName  + "\";");
				writer.println(level.getName() + ".objects[" + i + "].soundName   = \""+ obj.soundName  + "\";");
				writer.println(level.getName() + ".objects[" + i + "].imageX      = "+ obj.imageX     + ";");
				writer.println(level.getName() + ".objects[" + i + "].imageY      = "+ obj.imageY     + ";");
				writer.println(level.getName() + ".objects[" + i + "].width       = "+ obj.width      + ";");
				writer.println(level.getName() + ".objects[" + i + "].height      = "+ obj.height     + ";");
				writer.println(level.getName() + ".objects[" + i + "].screenY     = "+ obj.screenY    + ";");
				writer.println(level.getName() + ".objects[" + i + "].screenX     = "+ obj.screenX    + ";");
				writer.println(level.getName() + ".objects[" + i + "].isFinal     = "+ obj.isFinal    + ";");
				writer.println("--------------------------------------------------------");
				writer.println("--------------------------------------------------------");
				writer.println("--------------------------------------------------------");
				i++;
			}
			//Create the scene
			writer.println("local composer = require( \"composer\" )");
			writer.println("local touchable = require(\"src.Touchable\")");
			writer.println(" ");
			writer.println("local scene = composer.newScene()");
			writer.println(" ");
			writer.println("-- ----------------------------------------------------------------------------------- ");
			writer.println("-- Code outside of the scene event functions below will only be executed ONCE unless   ");
			writer.println("-- the scene is removed entirely (not recycled) via \"composer.removeScene()\"         ");
			writer.println("-- ----------------------------------------------------------------------------------- ");
			writer.println("                                                                                       ");
			writer.println("local nextLevelName = \"mainMenu\"                                                     ");
            writer.println("                                                                                       ");
			writer.println(" local function nextLevel(event)                                                       ");
			writer.println("    if(event.phase == \"ended\") then                                                  ");
			writer.println("        local options = {                                                              ");
			writer.println("                            effect = \"slideLeft\",                                    ");
			writer.println("                            time = 800,                                                ");
			writer.println("                            params = {levelName = nextLevelName}                       ");
			writer.println("                        }                                                              ");
			writer.println("        print(nextLevelName)                                                           ");
			writer.println("        if(nextLevelName ~= \"mainMenu\") then                                          ");
			writer.println("            composer.gotoScene(\"pages.\" .. nextLevelName, options)                    ");
			writer.println("        else                                                                            ");
			writer.println("            composer.gotoScene(\"mainMenu\", options)                                   ");
			writer.println("        end                                                                             ");
			writer.println("    end                                                                                 ");
			writer.println(" end                                                                                    ");
			writer.println("                                                                                        ");
			writer.println("-- -----------------------------------------------------------------------------------  ");
			writer.println("-- Scene event functions                                                                ");
			writer.println("-- -----------------------------------------------------------------------------------  ");
            writer.println("                                                                                        ");
            writer.println("                                                                                        ");
			writer.println("-- create()                                                                             ");
			writer.println("function scene:create( event )                                                          ");
			writer.println("                                                                                        ");
			writer.println("    local sceneGroup = self.view                                                        ");
			writer.println("    -- Code here runs when the scene is first created but has not yet appeared on screen");
			writer.println("");                                                                                      
			writer.println("end");                                                                                   
			writer.println(" ");                                                                                     
			writer.println(" ");                                                                                     
			writer.println("-- show()");                                                                             
			writer.println("function scene:show( event )                            ");
			writer.println("                                                        ");
			writer.println("                                                        ");
			writer.println("    local sceneGroup = self.view                        ");
			writer.println("    local phase = event.phase                           ");
			writer.println("    local backgroundImage;                              ");
			writer.println("    local foregroundImage;                              ");
			writer.println("    local objects  = {};                                ");
            writer.println("                                                        ");
			writer.println("    if ( phase == \"will\" ) then                       ");
			writer.println("        -- Code here runs when the scene is still off screen (but is about to come on screen)");
			writer.println("    if("+ level.getName() +".nextLevel ~= \"\" and "+ level.getName() +".nextLevel ~= \"mainMenu\") then                           ");
			writer.println("        nextLevelName = "+ level.getName() +".nextLevel;                                                      ");
			writer.println("    else                                                                                     ");
			writer.println("        nextLevelName = \"mainMenu\"                                                           ");
			writer.println("    end                                                                                      ");
			writer.println("    if "+ level.getName() +".background ~= \"none\" and "+ level.getName() +".background ~= \"null\" then                          ");
			writer.println("        backgroundImage = display.newImageRect("+ level.getName() +".background, display.actualContentWidth, display.actualContentHeight);");
			writer.println("        backgroundImage.x = display.contentCenterX                                                                       ");
			writer.println("        backgroundImage.y = display.contentCenterY                                                                       ");
			writer.println("        sceneGroup:insert(backgroundImage)                                                                               ");
			writer.println("    end                                                                                                                  ");
			writer.println("    if("+ level.getName() +".foreground ~= \"none\" and "+ level.getName() +".foreground ~= \"null\") then               ");
			writer.println("        foregroundImage = display.newImageRect("+ level.getName() +".foreground, display.actualContentwidth, display.actualContentHeight);");
			writer.println("        foregroundImage.x = display.contentCenterX                                                                       ");
			writer.println("        foregroundImage.y = display.contentCenterY                                                                       ");
			writer.println("        sceneGroup:insert(foregroundImage)                                                                               ");
			writer.println("    end                                                                                                                  ");
			writer.println("    local temp = "+ level.getName() +".objects[1];                                                                       ");
//			writer.println("    print(temp.ID);                                                                                                      ");
//			writer.println("    print(temp.soundPath)                                                                                                ");
			writer.println("    --touchable:createTouchable(temp);                                                                                   ");
            writer.println("                                                                                                                         ");
			writer.println("    --objects[1] = touchable:createTouchable("+ level.getName() +".objects[1]);                                          ");
			writer.println("    local temp = {};                                                                                                     ");
			writer.println("    for i = 1, "+ level.getName() +".objectCount do --pseudocode                                                         ");
			writer.println("        objects[i] = touchable:createTouchable("+ level.getName() +".objects[i]);                                        ");
            writer.println("                                                                                                                         ");
			writer.println("        if "+ level.getName() +".objects[i].isFinal == true then                                                         ");
			writer.println("            objects[i]:addEventListener(\"touch\", nextLevel)                                                            ");
			writer.println("        else");
			writer.println("            objects[i]:addEventListener(\"touch\", objects[i].onEvent())");
			writer.println("        end                                                            ");                                                  
			writer.println("        sceneGroup:insert(objects[i])   ");			writer.println("        sceneGroup:insert(objects[i])                                                                                    ");
			writer.println("    end                                                                                                                  ");
			writer.println("    elseif ( phase == \"did\" ) then                                                                                     ");
			writer.println("        -- Code here runs when the scene is entirely on screen                                                           ");
			writer.println("                                                                                                                         ");
			writer.println("    end                                                                                                                  ");
            writer.println("                                                                                                                         ");
			writer.println("end                                                                                                                      ");
			writer.println("                                                                                                                         ");
			writer.println("                                                                                                                         ");
			writer.println("-- hide()                                                                                                                ");
			writer.println("function scene:hide( event )                                                                                             ");
			writer.println("                                                                                                                         ");
			writer.println("    local sceneGroup = self.view                                                                                         ");
			writer.println("    local phase = event.phase                                                                                            ");
			writer.println("                                                                                                                         ");
			writer.println("    if ( phase == \"will\" ) then                                                                                        ");
			writer.println("        -- Code here runs when the scene is on screen (but is about to go off screen)                                    ");
			writer.println("                                                                                                                         ");
			writer.println("    elseif ( phase == \"did\" ) then                                                                                     ");
			writer.println("        -- Code here runs immediately after the scene goes entirely off screen                                           ");
			writer.println("                                                                                                                         ");
			writer.println("    end                                                                                                                  ");
			writer.println("end                                                                                                                      ");
			writer.println("                                                                                                                         ");
			writer.println("                                                                                                                         ");
			writer.println("-- destroy()                                                                                                             ");
			writer.println("function scene:destroy( event )                                                                                          ");
			writer.println("                                                                                                                         ");
			writer.println("    local sceneGroup = self.view                                                                                         ");
			writer.println("    -- Code here runs prior to the removal of scene's view                                                               ");
			writer.println("                                                                                                                         ");
			writer.println("end                                                                                                                      ");
			writer.println("                                                                                                                         ");
			writer.println("                                                                                                                         ");
			writer.println("-- -----------------------------------------------------------------------------------                                   ");
			writer.println("-- Scene event function listeners                                                                                        ");
			writer.println("-- -----------------------------------------------------------------------------------                                   ");
			writer.println("scene:addEventListener( \"create\", scene )                                                                              ");
			writer.println("scene:addEventListener( \"show\", scene )                                                                                ");
			writer.println("scene:addEventListener( \"hide\", scene )                                                                                ");
			writer.println("scene:addEventListener( \"destroy\", scene )                                                                             ");
			writer.println("-- -----------------------------------------------------------------------------------                                   ");
			writer.println("               ");
			writer.println("return scene   ");
			//writer.println("return " + level.getName() + ";"); //return scene instead of level now.
			writer.close();
		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (UnsupportedEncodingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
}
